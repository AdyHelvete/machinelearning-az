#tarea 4
#Pregunta 1
ggplot(data = mpg, mapping = aes(x=displ, y = hwy,color = drv) +
geom_point() +
geom_smooth( se = F)
#comparar
ggplot(data = mpg, mapping = aes(x=displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy)) +
geom_smooth(mapping = aes(x=displ, y = hwy))
#reproducir un grafico
ggplot(data = mpg, mapping = aes(x=displ, y = hwy)) +
geom_point() +
geom_smooth(se=F)
#reproducir un grafico
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy)) +
geom_smooth(mapping = aes(x=displ, y = hwy,group=drv),se=F)
#reproducir un grafico
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy,color=drv)) +
geom_smooth(mapping = aes(x=displ, y = hwy,group=drv,color=drv),se=F)
#reproducir un grafico
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy,color=drv,shape=drv)) +
geom_smooth(mapping = aes(x=displ, y = hwy),se=F)
#reproducir un grafico
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy,color=drv,shape=drv)) +
geom_smooth(mapping = aes(x=displ, y = hwy,group=drv,linetype=drv),se=F)
#reproducir un grafico
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy,group=drv,color=drv),show.legend = T,shape=23,stroke=2)
#reproducir un grafico
ggplot(data = mpg,mapping = aes(x=displ, y = hwy),show.legend = T) +
geom_point(data=filter(mpg,drv=="4"),show.legend = T,shape=23,stroke=2,color="white",fill="red")+
geom_point(data=filter(mpg,drv=="f"),show.legend = T,shape=23,stroke=2,color="white",fill="green")+
geom_point(data=filter(mpg,drv=="r"),show.legend = T,shape=23,stroke=2,color="white",fill="cyan")
#este es el bueno!
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) +
geom_point(mapping=aes(shape = drv, fill=drv), color="white", stroke= 2, shape=23, size=4)
setwd("~/GitHub/machinelearning-az/ML-Practicas/P3 - Classification/2 - K-NN")
install.packages("caTools")
install.packages("ElementStatLearn")
#importar dataset
dataset=read.csv("Social_Network_Ads.csv")
#Seleccionar columnas de variables
dataset=dataset[,3:5]
#dividir los datos en conjuntos de entrenamiento y test
#install.packages("caTools")
library(caTools)
set.seed(123) #Semilla para aleatorios
split=sample.split(dataset$Purchased,SplitRatio =0.75)
training_set=subset(dataset,split==TRUE)
testing_set=subset(dataset,split==FALSE)
# Escalado de valores
training_set[,1:2]=scale(training_set[,1:2])
testing_set[,1:2]=scale(testing_set[,1:2])
library(class)
?knn
library(class)
y_pred=knn(train = training_set[,-3],
test = testing_set[,-3],
cl=training_set[,3],
k=5)
y_pred
cm=table(testing_set[,3],y_pred)
cm
library(ElementStatLearn)
set=training_set
X1=seq(min(set[,1])-1,max(set[,1])+1, by=0.01)
X2=seq(min(set[,2])-1,max(set[,2])+1, by=0.01)
grid_set=expand.grid(X1,X2)
colnames(grid_set)=c("Age","EstimatedSalary")
prob_set=predict(classifier,type="response",newdata = grid_set)
y_grid=ifelse(prob_set>0.5,1,0)
plot(set[,-3],
main="Clasificaci贸n K-NN(Conjunto de training)",
xlab = "Edad",ylab = "Sueldo estimado",
xlim = range(X1),ylim = range(X2)
)
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add=TRUE)
points(grid_set,pch='.',col=ifelse(y_grid==1,'springgreen3','tomato'))
points(set,pch=21,bg=ifelse(set[,3]==1,'green4','red3'))
set=training_set
X1=seq(min(set[,1])-1,max(set[,1])+1, by=0.01)
X2=seq(min(set[,2])-1,max(set[,2])+1, by=0.01)
grid_set=expand.grid(X1,X2)
colnames(grid_set)=c("Age","EstimatedSalary")
y_grid=knn(train = training_set[,-3],
test = grid_set,
cl=training_set[,3],
k=5)
plot(set[,-3],
main="Clasificaci贸n K-NN(Conjunto de training)",
xlab = "Edad",ylab = "Sueldo estimado",
xlim = range(X1),ylim = range(X2)
)
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add=TRUE)
points(grid_set,pch='.',col=ifelse(y_grid==1,'springgreen3','tomato'))
points(set,pch=21,bg=ifelse(set[,3]==1,'green4','red3'))
#Visualizaci贸n del conjunto de prueba
set=testing_set
X1=seq(min(set[,1])-1,max(set[,1])+1, by=0.01)
X2=seq(min(set[,2])-1,max(set[,2])+1, by=0.01)
grid_set=expand.grid(X1,X2)
colnames(grid_set)=c("Age","EstimatedSalary")
y_grid=knn(train = training_set[,-3],
test = grid_set,
cl=training_set[,3],
k=5)
plot(set[,-3],
main="Clasificaci贸n K-NN (Conjunto de testing)",
xlab = "Edad",ylab = "Sueldo estimado",
xlim = range(X1),ylim = range(X2)
)
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add=TRUE)
points(grid_set,pch='.',col=ifelse(y_grid==1,'springgreen3','tomato'))
points(set,pch=21,bg=ifelse(set[,3]==1,'green4','red3'))
