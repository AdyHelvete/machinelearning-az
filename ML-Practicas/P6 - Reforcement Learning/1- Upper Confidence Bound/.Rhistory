install.packages(tydiverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
data("iris")
colnames("iris")
colnames(iris)
dim(iris)
summary(iris)
iris$Setosa<-ifelse(iris$Species=="setosa",1,0)
iris$veriscolor<-(iris$Species=="veriscolor",1,0)
iris$veriscolor<-ifelse(iris$Species=="veriscolor",1,0)
iris$Species<-NULL
colnames(iris)
model<-lm(iris$Sepal.Length ~ iris$Sepal.Width+iris$Petal.Length+iris$Petal.Width+iris$Setosa+iris$veriscolor)
summary(iris)
summary(model)
iris$versicolor<-(iris$Species=="veriscolor",1,0)
iris$versicolor<-(iris$Species=="versicolor",1,0)
setwd("~/GitHub/machinelearning-az/ML-Practicas/P6 - Reforcement Learning/1- Upper Confidence Bound")
dataset=read.csv("Ads_CTR_Optimisation.csv")
View(dataset)
N=1000
d=10
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
ad=sample(1:10,1)
ads_selected=append(ads_selected.ad)
reward=dataset[n,ad]
total_reward=total_reward+reward
}
dataset=read.csv("Ads_CTR_Optimisation.csv")
N=1000
d=10
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
ad=sample(1:10,1)
ads_selected=append(ads_selected,ad)
reward=dataset[n,ad]
total_reward=total_reward+reward
}
N=1000
d=10
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
ad=sample(1:10,1)
ads_selected=append(ads_selected,ad)
reward=dataset[n,ad]
total_reward=total_reward+reward
}
# Visualising the results
N=1000
d=10
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
ad=sample(1:10,1)
ads_selected=append(ads_selected,ad)
reward=dataset[n,ad]
total_reward=total_reward+reward
}
# Visualising the results
N=1000
d=10
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
ad=sample(1:10,1)
ads_selected=append(ads_selected,ad)
reward=dataset[n,ad]
total_reward=total_reward+reward
}
# Visualising the results
N=1000
d=10
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
ad=sample(1:10,1)
ads_selected=append(ads_selected,ad)
reward=dataset[n,ad]
total_reward=total_reward+reward
}
# Visualising the results
N=1000
d=10
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
ad=sample(1:10,1)
ads_selected=append(ads_selected,ad)
reward=dataset[n,ad]
total_reward=total_reward+reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histograma de seleccion de anuncios',
xlab = 'ads',
ylab='Numero de veces seleccionado')
#implementar UCB
d=10
N=10000
number_of_selections=integer(d)
sums_of_rewards=integer(d)
ads_selected=integer(N)
total=reward=0
for(n in 1:N){
max_upper_bound=0
ad=0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward=sums_of_rewards[i]/number_of_selections[i]
delta_i=sqrt(3/2*log(n)/number_of_selections[i])
upper_bound=average_reward+delta_i
}else{
upper_bound=1e400
}
if(upper_bound>max_upper_bound){
max_upper_bound=upper_bound
ad=i
}
}
ads_selected=append(ads_selected,ad)
number_of_selections[ad]=number_of_selections[ad]+1
reward=dataset[n,ad]
sums_of_rewards[ad]=sums_of_rewards[ad]+reward
total_reward=total_reward+reward
}
dataset=read.csv("Ads_CTR_Optimisation.csv")
#implementar UCB
d=10
N=10000
number_of_selections=integer(d)
sums_of_rewards=integer(d)
ads_selected=integer(0)
total=reward=0
for(n in 1:N){
max_upper_bound=0
ad=0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward=sums_of_rewards[i]/number_of_selections[i]
delta_i=sqrt(3/2*log(n)/number_of_selections[i])
upper_bound=average_reward+delta_i
}else{
upper_bound=1e400
}
if(upper_bound>max_upper_bound){
max_upper_bound=upper_bound
ad=i
}
}
ads_selected=append(ads_selected,ad)
number_of_selections[ad]=number_of_selections[ad]+1
reward=dataset[n,ad]
sums_of_rewards[ad]=sums_of_rewards[ad]+reward
total_reward=total_reward+reward
}
dataset=read.csv("Ads_CTR_Optimisation.csv")
#implementar UCB
d=10
N=10000
number_of_selections=integer(d)
sums_of_rewards=integer(d)
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
max_upper_bound=0
ad=0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward=sums_of_rewards[i]/number_of_selections[i]
delta_i=sqrt(3/2*log(n)/number_of_selections[i])
upper_bound=average_reward+delta_i
}else{
upper_bound=1e400
}
if(upper_bound>max_upper_bound){
max_upper_bound=upper_bound
ad=i
}
}
ads_selected=append(ads_selected,ad)
number_of_selections[ad]=number_of_selections[ad]+1
reward=dataset[n,ad]
sums_of_rewards[ad]=sums_of_rewards[ad]+reward
total_reward=total_reward+reward
}
ads_selected
hist(ads_selected,
col = 'blue',
main = 'Histograma de seleccion de anuncios',
xlab = 'ads',
ylab='Numero de veces seleccionado')
